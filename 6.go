//Реализовать все возможные способы остановки выполнения горутины.
//1. Использование канала для сигнала остановки

package main

import (
	"fmt"
	"time"
)

func main() {
	/*Использование канала с типом struct{} является распространенным способом сигнализации о событиях в Go.
	Фактически, struct{} - это пустая структура, не содержащая полей, и по сути представляет собой минимально возможный тип данных.
	Она используется в качестве нулевого размера, что позволяет создавать канал без необходимости передачи каких-либо данных.
	Когда в канал отправляется структура struct{}, она не занимает дополнительного места в памяти, и канал просто получает сигнал о событии.
	Использование struct{} в качестве типа канала - это простой и эффективный способ сигнализировать о выполнении операций,
	завершении работы горутин или других событиях без передачи каких-либо данных.
	Поэтому когда мы видим конструкцию make(chan struct{}), это обычно означает,
	что канал будет использоваться для отправки сигналов о событиях, а не для передачи данных.*/
	stop := make(chan struct{})
	go func() {
		for {
			select {
			default:
				fmt.Println("Working...")
				time.Sleep(1 * time.Second)
			case <-stop:
				fmt.Println("Stopping...")
				return
			}
		}
	}()

	time.Sleep(3 * time.Second)
	close(stop)
	time.Sleep(1 * time.Second)
	fmt.Println("Main goroutine exits")
}
